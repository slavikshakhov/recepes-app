{"version":3,"sources":["Recepe/Recepe.module.css","Recepes/Recepes.module.css","Recepe/Recepe.js","Recepes/Recepes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recepe","ingredients","label","image","minutes","className","RecepeStyles","container","horizontalCenter","img","src","text","time","divider","map","ingredient","i","key","Recepes","useState","input","setInput","data","setData","word","setWord","useEffect","getData","a","fetch","process","recs","json","res","console","log","els","hits","recipe","Math","floor","random","RecepesStyles","inputSection","onSubmit","e","preventDefault","onChange","target","value","placeholder","searchBtn","contentSection","el","ingredientLines","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,UAAY,0BAA0B,IAAM,oBAAoB,iBAAmB,iCAAiC,KAAO,qBAAqB,QAAU,wBAAwB,KAAO,qBAAqB,QAAU,wBAAwB,YAAc,8B,gBCAhRD,EAAOC,QAAU,CAAC,UAAY,2BAA2B,aAAe,8BAA8B,eAAiB,gCAAgC,MAAQ,uBAAuB,UAAY,6B,4OC4BnLC,EA1BA,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAC3C,OACE,yBAAKC,UAAWC,IAAaC,WAC3B,yBAAKF,UAAWC,IAAaE,kBAC3B,yBAAKH,UAAWC,IAAaG,IAAKC,IAAKP,KAGzC,yBAAKE,UAAWC,IAAaK,MAC3B,wBAAIN,UAAWC,IAAaE,kBAAmBN,GAC/C,uBAAGG,UAAWC,IAAaM,MAA3B,iBACiB,IACf,0BAAMP,UAAWC,IAAaF,SAA9B,IAAyCA,EAAzC,KAFF,YAIA,yBAAKC,UAAWC,IAAaO,UAC7B,yBAAKR,UAAWC,IAAaL,aAC1BA,EAAYa,KAAI,SAACC,EAAYC,GAAb,OACf,yBAAKC,IAAKD,GACR,2BAAID,WCyCHG,EAzDC,WAAO,IAAD,EACMC,mBAAS,IADf,mBACbC,EADa,KACNC,EADM,OAEIF,mBAAS,IAFb,mBAEbG,EAFa,KAEPC,EAFO,OAGIJ,mBAAS,QAHb,mBAGbK,EAHa,KAGPC,EAHO,KAKpBC,qBAAU,WACRC,MACC,CAACH,IACJ,IAAMG,EAAO,uCAAG,oCAAAC,EAAA,sEACKC,MAAM,mCAAD,OACaL,EADb,mBAC4BM,WAD5B,oBACoEA,qCAF9E,cACRC,EADQ,gBAIIA,EAAKC,OAJT,OAIRC,EAJQ,OAKdC,QAAQC,IAAIF,GAGNG,EAAMH,EAAII,KARF,cASGD,GATH,IASd,2BAAsB,QACjBE,OAAOlC,QAAU,EAAImC,KAAKC,MAAsB,GAAhBD,KAAKE,UAV5B,8BAYdlB,EAAQU,EAAII,MAZE,4CAAH,qDAqBb,OACE,yBAAKhC,UAAWqC,IAAcnC,WAC5B,yBAAKF,UAAWqC,IAAcC,cAC5B,0BAAMC,SAPS,SAACC,GACpBA,EAAEC,iBACFrB,EAAQL,KAMF,2BACEf,UAAWqC,IAActB,MACzB2B,SAbY,SAACF,GACrBxB,EAASwB,EAAEG,OAAOC,QAaVA,MAAO7B,EACP8B,YAAY,0BAEd,4BAAQ7C,UAAWqC,IAAcS,WAAjC,YAGJ,yBAAK9C,UAAWqC,IAAcU,gBAC3B9B,EAAKR,KAAI,SAACuC,EAAIrC,GAAL,OACR,kBAAC,EAAD,CACEC,IAAKD,EACLf,YAAaoD,EAAGf,OAAOgB,gBACvBpD,MAAOmD,EAAGf,OAAOpC,MACjBC,MAAOkD,EAAGf,OAAOnC,MACjBC,QAASiD,EAAGf,OAAOlC,gBCvChBmD,EAVH,WACV,OACE,yBAAKlD,UAAU,WACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,SCIYmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.e04eee17.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Recepe_container__RW0xq\",\"img\":\"Recepe_img__2GDec\",\"horizontalCenter\":\"Recepe_horizontalCenter__2Z0tq\",\"text\":\"Recepe_text__1WRph\",\"minutes\":\"Recepe_minutes__20BIW\",\"time\":\"Recepe_time__1FU7r\",\"divider\":\"Recepe_divider__bEJ8a\",\"ingredients\":\"Recepe_ingredients__2MkdW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Recepes_container__uiBO6\",\"inputSection\":\"Recepes_inputSection__2f3Ca\",\"contentSection\":\"Recepes_contentSection__IaoGk\",\"input\":\"Recepes_input__2h9S9\",\"searchBtn\":\"Recepes_searchBtn__KsFbs\"};","import React from \"react\";\r\nimport RecepeStyles from \"./Recepe.module.css\";\r\n\r\nconst Recepe = ({ ingredients, label, image, minutes }) => {\r\n  return (\r\n    <div className={RecepeStyles.container}>\r\n      <div className={RecepeStyles.horizontalCenter}>\r\n        <img className={RecepeStyles.img} src={image} />\r\n      </div>\r\n\r\n      <div className={RecepeStyles.text}>\r\n        <h1 className={RecepeStyles.horizontalCenter}>{label}</h1>\r\n        <p className={RecepeStyles.time}>\r\n          Time required:{\" \"}\r\n          <span className={RecepeStyles.minutes}> {minutes} </span> minutes\r\n        </p>\r\n        <div className={RecepeStyles.divider}></div>\r\n        <div className={RecepeStyles.ingredients}>\r\n          {ingredients.map((ingredient, i) => (\r\n            <div key={i}>\r\n              <p>{ingredient}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recepe;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport RecepesStyles from \"./Recepes.module.css\";\r\nimport Recepe from \"../Recepe/Recepe\";\r\n\r\nconst Recepes = () => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [data, setData] = useState([]);\r\n  const [word, setWord] = useState(\"pork\");\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [word]);\r\n  const getData = async () => {\r\n    const recs = await fetch(\r\n      `https://api.edamam.com/search?q=${word}&app_id=${process.env.REACT_APP_API_ID}&app_key=${process.env.REACT_APP_API_KEY}`\r\n    );\r\n    const res = await recs.json();\r\n    console.log(res);\r\n\r\n    // add custom functionallity: minutes necessary to make a dish, here randomly assigned minutes\r\n    const els = res.hits;\r\n    for (const el of els) {\r\n      el.recipe.minutes = 5 + Math.floor(Math.random() * 40);\r\n    }\r\n    setData(res.hits);\r\n  };\r\n  const onInputChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n  const onFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    setWord(input);\r\n  };\r\n  return (\r\n    <div className={RecepesStyles.container}>\r\n      <div className={RecepesStyles.inputSection}>\r\n        <form onSubmit={onFormSubmit}>\r\n          <input\r\n            className={RecepesStyles.input}\r\n            onChange={onInputChange}\r\n            value={input}\r\n            placeholder=\"Enter main ingredient\"\r\n          />\r\n          <button className={RecepesStyles.searchBtn}>Search</button>\r\n        </form>\r\n      </div>\r\n      <div className={RecepesStyles.contentSection}>\r\n        {data.map((el, i) => (\r\n          <Recepe\r\n            key={i}\r\n            ingredients={el.recipe.ingredientLines}\r\n            label={el.recipe.label}\r\n            image={el.recipe.image}\r\n            minutes={el.recipe.minutes}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recepes;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Recepes from \"./Recepes/Recepes\";\n\nconst App = () => {\n  return (\n    <div className=\"main-bg\">\n      <div className=\"overlay\">\n        <Recepes />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}